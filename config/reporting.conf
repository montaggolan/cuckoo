# Enable or disable the available reporting modules [on/off].
# If you add a custom reporting module to your Cuckoo setup, you have to add
# a dedicated entry in this file, or it won't be executed.
# You can also add additional options under the section of your module and
# they will be available in your Python class.

[jsondump]
enabled = yes
indent = 4
encoding = latin-1
calls = yes

[reporthtml]
enabled = yes

[mongodb]
enabled = yes
host = 127.0.0.1
port = 27017
db = cuckoo
store_memdump = yes
paginate = 100

[elasticsearch]
enabled = yes
# Comma-separated list of ElasticSearch hosts. Format is IP:PORT, if port is
# missing the default port is used.
# Example: hosts = 127.0.0.1:9200, 192.168.1.1:80
hosts = 127.0.0.1
# Set to yes if we want to be able to search every API call instead of just
# through the behavioral summary.
calls = yes
# Index of this Cuckoo instance. If multiple Cuckoo instances connect to the
# same ElasticSearch host then this index (in Moloch called "instance") should
# be unique for each Cuckoo instance.
#
#index = cuckoo
#
# Logging time pattern.  This sets how elasticsearch creates indexes
# by default it is yearly in most instances this will be sufficient
# valid options: yearly, monthly, daily
#
# index_time_pattern = yearly
#
# Cuckoo node name in Elasticsearch to identify reporting host. Can be useful
# for automation and while referring back to correct Cuckoo host.
#
cuckoo_node = ""

[moloch]
enabled = no
# If the Moloch web interface is hosted on a different IP address than the
# Cuckoo Web Interface then you'll want to override the IP address here.
# host = 127.0.0.1
#
# Following are various configurable settings. When in use of a recent version
# of Moloch there is no need to change any of the following settings as they
# represent the defaults.
#
# moloch_capture = /data/moloch/bin/moloch-capture
# conf = /data/moloch/etc/config.ini
# instance = cuckoo

[notification]
# Notification module to inform external systems that analysis is finished.
# You should consider keeping this as very last reporting module.
enabled = no

# External service URL where info will be POSTed.
# example : https://my.example.host/some/destination/url
url =

# Cuckoo host identifier - can be hostname.
# for example : my.cuckoo.host
identifier =

[mattermost]
enabled = no

# Mattermost webhook URL.
# example : https://my.mattermost.host/hooks/yourveryrandomkey
# url=
#
# Cuckoo host URL to make analysis ID clickable.
# example : https://my.cuckoo.host/
# myurl=
#
# Username to show when posting message
username = cuckoo
# What kind of data to show apart from default.
# Show virustotal hits.
# show-virustotal=yes
#
# Show matched cuckoo signatures.
# show-signatures=no
#
# Show collected URL-s by signature "network_http".
# show-urls=no
#
# Hide filename and create hash of it
# hash-filename=no

[syslog]
enabled = yes
host =
port = 514
protocol = udp
logfile = yes
logname = syslog.log

[misp]
enabled = yes
url =
apikey =
# The various modes describe which information should be submitted to MISP,
# separated by whitespace. Available modes: maldoc ipaddr hashes url dropped.
mode = maldoc ipaddr hashes url dropped

ioc_blacklist = ioc_blacklist.json
extensions_whitelist = ewf

# The tag added to created events
tag = Cuckoo

# The default distribution:
# your_organization = 0
# this_community = 1
# connected_communities = 2
# all_communities = 3
# sharing_group = 4
distribution=0

# The threat level:
# high = 1
# medium = 2
# low = 3
# undefined = 4
threat_level=4

# The analysis status:
# initial = 0
# ongoing = 1
# completed = 2
analysis = 0
